#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <pthread.h>
#include <semaphore.h>
#include <sys/types.h>
#include <sys/time.h>
#include <unistd.h>


/* Constants */
#define TOTAL_SPOTS_ON_FERRY 6
#define LOAD_MAX 5


/* Threads to create and control vehiclepthreads */
pthread_t vehicleCreationThread;
pthread_t captainThread;
pthread_t vehicleThread[200];


/* mutexes for counter protection and the counters they protect */
pthread_mutex_t protectCarsQueued;
int carsQueuedCounter = 0;
pthread_mutex_t protectTrucksQueued;
int trucksQueuedCounter = 0;
pthread_mutex_t protectCarsLoaded;
int carsLoadedCounter = 0;
pthread_mutex_t protectTrucksLoaded;
int trucksLoadedCounter = 0;
pthread_mutex_t protectCarsSailing;
int carsSailingCounter = 0;
pthread_mutex_t protectTrucksSailing;
int trucksSailingCounter = 0;
pthread_mutex_t protectCarsUnloaded;
int carsUnloadedCounter = 0;
pthread_mutex_t protectTrucksUnloaded;
int trucksUnloadedCounter = 0;
pthread_mutex_t protectThreadCounter;
int threadCounter = 0;
int threadFlag = 0;

/* counting semaphores to control cars and trucks */
sem_t carsQueued;
sem_t trucksQueued;
sem_t carsLoaded;
sem_t trucksLoaded;
sem_t carsSailing;
sem_t trucksSailing;
sem_t carsUnloaded;
sem_t trucksUnloaded;
sem_t waitToExit;


struct timespec tm;
int seed = 2;
int fullSpotsOnFerry = 0;  
int isTruck = 0;          /* probability that */
                          /* next vehicle is a truck */
int maxTimeToNextArrival; /* maximum number of milliseconds */
                          /* between vehicle arrivals*/
int truckArrivalProb;     /* User supplied probability that the */
int seed;                 /* seed for the random number generator */
struct timeval startTime; /* time at start of program execution */
int elapsed = 0;          /* time from start of program execution */
int nextArrivalTime = 0;  /* time from start of program execution */
			  /* at which the last vehicle arrived */
char createVehicleLabel[30] = "CREATEVEHICLE:";
char captainLabel[31] = "CAPTAIN:";
char carLabel[31] = "CAR:";
char truckLabel[31] = "TRUCK:";


/* pointers to functions that will become threads */
void* captain();
void* truck();
void* car();
void* createVehicle();
int sem_waitChecked(sem_t *semaphoreID);
int sem_postChecked(sem_t *semaphoreID);
int sem_initChecked(sem_t *semaphoreID, int pshared, unsigned int value);
int sem_destroyChecked(sem_t *semaphoreID);
int pthread_mutex_lockChecked(pthread_mutex_t *mutexID);
int pthread_mutex_unlockChecked(pthread_mutex_t *mutexID);
int pthread_mutex_initChecked(pthread_mutex_t *mutexID, 
                              const pthread_mutexattr_t *attrib);
int pthread_mutex_destroyChecked(pthread_mutex_t *mutexID);


int timeChange( const struct timeval startTime );

int main()
{
    /* Initialize  semaphores */
    sem_initChecked(&carsQueued, 0, 0);
    sem_initChecked(&trucksQueued, 0, 0);
    sem_initChecked(&carsLoaded, 0, 0);
    sem_initChecked(&trucksLoaded, 0, 0);
    sem_initChecked(&carsSailing, 0, 0);
    sem_initChecked(&trucksSailing, 0, 0);
    sem_initChecked(&carsUnloaded, 0, 0);
    sem_initChecked(&trucksUnloaded, 0, 0);
    sem_initChecked(&waitToExit, 0, 0);

    pthread_mutex_initChecked(&protectCarsQueued, NULL);
    pthread_mutex_initChecked(&protectTrucksQueued, NULL);
    pthread_mutex_initChecked(&protectCarsLoaded, NULL);
    pthread_mutex_initChecked(&protectTrucksLoaded, NULL);
    pthread_mutex_initChecked(&protectCarsSailing, NULL);
    pthread_mutex_initChecked(&protectTrucksSailing, NULL);
    pthread_mutex_initChecked(&protectCarsUnloaded, NULL);
    pthread_mutex_initChecked(&protectTrucksUnloaded, NULL);
    pthread_mutex_initChecked(&protectThreadCounter, NULL);

    printf("Please enter integer values for the following variables\n");
    /* timing of car and truck creation */
    do
    {
    	printf("Enter the percent probability that the next vehicle is a truck\n");
    	scanf("%d", &truckArrivalProb );
    }
    while ( truckArrivalProb > 100 || truckArrivalProb < 0);
    maxTimeToNextArrival = 0;
    do
    {
        printf("Enter the maximum length of the interval between vehicles\n");
        printf("time interval should be between 1000 and 5000 ms\n");
        scanf("%d", &maxTimeToNextArrival );
    }
    while( maxTimeToNextArrival <= 1000 || maxTimeToNextArrival >= 5000); 
    do
    {
    	printf("Enter the seed for random number generation\n");
    	scanf("%d", &seed );
    } 
    while( seed <= 2 || seed >= RAND_MAX );


    /* Beginning the vehicle creation process */
    /* Beginning the captain process */
    pthread_create(&vehicleCreationThread, NULL, createVehicle, NULL);
    pthread_create(&captainThread, NULL, captain, NULL);

    /* Waiting for the vechicle creation process to end */
    /* Waiting for the captain process to end */
    pthread_join(captainThread, NULL);
    pthread_join(vehicleCreationThread, NULL);
    pthread_mutex_lockChecked(&protectThreadCounter);
    for( int i=0; i<threadCounter; i++) {
    	pthread_mutex_unlockChecked(&protectThreadCounter);
	pthread_cancel(vehicleThread[i]);  
	pthread_join(vehicleThread[i],NULL); 
        pthread_mutex_lockChecked(&protectThreadCounter);
    }
    pthread_mutex_unlockChecked(&protectThreadCounter);


    pthread_mutex_destroyChecked(&protectTrucksQueued);
    pthread_mutex_destroyChecked(&protectCarsQueued);
    pthread_mutex_destroyChecked(&protectTrucksSailing);
    pthread_mutex_destroyChecked(&protectCarsSailing);
    pthread_mutex_destroyChecked(&protectCarsLoaded);
    pthread_mutex_destroyChecked(&protectTrucksLoaded);
    pthread_mutex_destroyChecked(&protectCarsUnloaded);
    pthread_mutex_destroyChecked(&protectTrucksUnloaded);
    pthread_mutex_destroyChecked(&protectThreadCounter);


    /* destroy all semaphores created */
    sem_destroyChecked(&carsQueued);
    sem_destroyChecked(&trucksQueued);
    sem_destroyChecked(&carsLoaded);
    sem_destroyChecked(&trucksLoaded);
    sem_destroyChecked(&carsSailing);
    sem_destroyChecked(&trucksSailing);
    sem_destroyChecked(&carsUnloaded);
    sem_destroyChecked(&trucksUnloaded);
    sem_destroyChecked(&waitToExit);

    return 0;
}
 

void* createVehicle()
{
    printf("%-20sVehicle creation thread has been started\n", createVehicleLabel);
    
    /*  Initialize start time */
    gettimeofday(&startTime, NULL);
    srand (seed);
    while( 1) { 
      /* If present time is later than arrival time of the next vehicle */
      /*         Determine if the vehicle is a car or truck */
      /*         Have the vehicle put a message in the queue indicating */
      /*         that it is in line */
      /* Then determine the arrival time of the next vehicle */ 
      elapsed = timeChange(startTime);
      while(elapsed >= nextArrivalTime) {
    	  pthread_mutex_lockChecked(&protectThreadCounter);
	  if ( threadFlag > 0 ) 
	  { 
		break;
	  }
  	  pthread_mutex_unlockChecked(&protectThreadCounter);
          printf("%-20sElapsed time %d msec\n", createVehicleLabel, elapsed); 
          if(nextArrivalTime > 0 ) { 
              isTruck = rand() % 101;
              if(isTruck >  truckArrivalProb ) {
                  /* This is a car */
		    
    		    pthread_mutex_lockChecked(&protectThreadCounter);
		    pthread_create(&(vehicleThread[threadCounter]), 
		    NULL, car, NULL);
		    threadCounter++;	
    		    pthread_mutex_unlockChecked(&protectThreadCounter);
		    printf("%-20sCreated a car thread\n", createVehicleLabel);
              }
              else {
                  /* This is a truck */
    		    pthread_mutex_lockChecked(&protectThreadCounter);
		    pthread_create(&(vehicleThread[threadCounter]), 
		    NULL, truck, NULL);
		    threadCounter++;	
    		    pthread_mutex_unlockChecked(&protectThreadCounter);
		    printf("%-20sCreated a truck thread\n", createVehicleLabel);
              }
          }
          nextArrivalTime += (1000 + rand()% (maxTimeToNextArrival-1000));
	  printf("%-20sNext arrival time %d\n", createVehicleLabel , nextArrivalTime);
      	  /*sched_yield();*/
       }
       if( threadFlag > 0){
		 pthread_mutex_unlockChecked(&protectThreadCounter);
		 break;
      }
    }
    pthread_exit(NULL);
}


void* truck()
{
    unsigned long int *threadId;

    threadId = (unsigned long int *)pthread_self();


    /* truck arrives in the queue */
    pthread_mutex_lockChecked(&protectTrucksQueued);
    trucksQueuedCounter++;
    pthread_mutex_unlockChecked(&protectTrucksQueued);
    printf("%-20sTruck with threadID %lu queued\n", truckLabel, *threadId);
    sem_waitChecked(&trucksQueued);
    printf("%-20sTruck with threadID %lu leaving queue to load\n", truckLabel, *threadId);
    
    /* Captain has signalled this truck */
    /* Truck loads onto ferry */
    sem_postChecked(&trucksLoaded);
    printf("%-20sTruck with threadID %lu is onboard the ferry\n", truckLabel, *threadId);

    /* Unload ferry */
    pthread_mutex_lockChecked(&protectTrucksSailing);
    trucksSailingCounter++;
    pthread_mutex_unlockChecked(&protectTrucksSailing);
    sem_waitChecked(&trucksSailing);
    printf("%-20sTruck with threadID %lu is now unloading\n", truckLabel, *threadId);
    pthread_mutex_lockChecked(&protectTrucksUnloaded);
    trucksUnloadedCounter++;
    pthread_mutex_unlockChecked(&protectTrucksUnloaded);
    printf("%-20sTruck with threadID %lu has unloaded\n", truckLabel, *threadId);
    sem_postChecked(&trucksUnloaded);

    sem_waitChecked(&waitToExit);
    printf("%-20sTruck with threadID %lu is about to exit\n", truckLabel, *threadId);
    pthread_exit(NULL);
}

void* car()
{
    unsigned long int *threadId;

    threadId = (unsigned long int *)pthread_self();


    /* car arrives in the queue */
    pthread_mutex_lockChecked(&protectCarsQueued);
    carsQueuedCounter++;
    pthread_mutex_unlockChecked(&protectCarsQueued);
    printf("%-20sCar with threadID %lu queued\n", carLabel, *threadId);
    sem_waitChecked(&carsQueued);
    printf("%-20sCar with threadID %lu leaving queue to load\n", carLabel, *threadId);
    
    /* Captain has signalled this car */
    /* Car loads onto ferry */
    sem_postChecked(&carsLoaded);
    printf("%-20sCar with threadID %lu is onboard the ferry\n", carLabel, *threadId);

    /* Unload ferry */
    pthread_mutex_lockChecked(&protectCarsSailing);
    carsSailingCounter++;
    pthread_mutex_unlockChecked(&protectCarsSailing);
    sem_waitChecked(&carsSailing);
    printf("%-20sCar with threadID %lu is now unloading\n", carLabel, *threadId);
    pthread_mutex_lockChecked(&protectCarsUnloaded);
    carsUnloadedCounter++;
    pthread_mutex_unlockChecked(&protectCarsUnloaded);
    printf("%-20sCar with threadID %lu has unloaded\n", carLabel, *threadId);
    sem_postChecked(&carsUnloaded);

    sem_waitChecked(&waitToExit);
    printf("%-20sCar with threadID %lu is about to exit\n", carLabel, *threadId);
    pthread_exit(NULL);
}


void* captain()
{
    /* counting of cars and trucks to determine full ferry load */
    int loads = 0;            /* # of loads of vehicles delivered*/
    int vehicles = 0;
    int numberOfCarsQueued = 0;
    int numberOfTrucksQueued = 0;
    int numberOfTrucksLoaded = 0;
    int numberOfSpacesFilled = 0;
    int numberOfSpacesEmpty = 0;
    int numberOfVehicles = 0;
    int counter = 0;
 
    printf("%-20scaptain thread started \n", captainLabel);

    /* captain waits for 6 vehicles before loading first load */
    while (vehicles < 8)
    {

	usleep(1000000);

	pthread_mutex_lockChecked(&protectTrucksQueued);
    	vehicles = trucksQueuedCounter;
    	pthread_mutex_unlockChecked(&protectTrucksQueued);
    	pthread_mutex_lockChecked(&protectCarsQueued);
    	vehicles += carsQueuedCounter;
    	pthread_mutex_unlockChecked(&protectCarsQueued);
    }


    while (loads < LOAD_MAX) 
    {
        printf("CAPTAINCAPTAIN                loop started\n");
        /* load vehicles from the waiting queues. */
	/* first initialize local counters for this load */
	numberOfTrucksLoaded = 0;
	numberOfSpacesFilled = 0;
	numberOfVehicles = 0;

	/* The first time through the looop load trucks and cars */
	/* from loading queue ignoring cars and trucks that arrive */
	/* during loading by using */
	/* (use local values taken at beginning of eoading) */
	/* Next consider the vehicles that arrive during and after loading */
	/* by repeating the same loop until the ferry is full */
	while(numberOfSpacesFilled < TOTAL_SPOTS_ON_FERRY) {
	    pthread_mutex_lockChecked(&protectTrucksQueued);
	    pthread_mutex_lockChecked(&protectCarsQueued);
	    numberOfTrucksQueued = trucksQueuedCounter;
	    numberOfCarsQueued = carsQueuedCounter;
   	    pthread_mutex_unlockChecked(&protectCarsQueued);
   	    pthread_mutex_unlockChecked(&protectTrucksQueued);
	    while(numberOfTrucksQueued > 0 && 
	        numberOfSpacesFilled < TOTAL_SPOTS_ON_FERRY-1 && 
		numberOfTrucksLoaded < 2) {
    	    	pthread_mutex_lockChecked(&protectTrucksQueued);
	    	trucksQueuedCounter--;
	    	numberOfTrucksQueued--;
	    	sem_postChecked(&trucksQueued);
    	    	pthread_mutex_unlockChecked(&protectTrucksQueued);
	    	numberOfTrucksLoaded++;
	    	numberOfSpacesFilled+=2;
                numberOfVehicles++;
        	printf("%-20sTruck selected for loading\n", captainLabel);
	    	sem_waitChecked(&trucksLoaded);
        	printf("%-20sCaptain knows truck is loaded\n", captainLabel);
    	    }
	    while(numberOfCarsQueued > 0 && 
		numberOfSpacesFilled < TOTAL_SPOTS_ON_FERRY) {
    	    	pthread_mutex_lockChecked(&protectCarsQueued);
	    	carsQueuedCounter--;
		numberOfCarsQueued--;
	    	sem_postChecked(&carsQueued);
    	    	pthread_mutex_unlockChecked(&protectCarsQueued);
	    	numberOfSpacesFilled++;
                numberOfVehicles++;
        	printf("%-20sCar selected for loading\n", captainLabel);
    	    	pthread_mutex_lockChecked(&protectCarsLoaded);
	    	carsLoadedCounter++;
    	    	pthread_mutex_unlockChecked(&protectCarsLoaded);
	    	sem_waitChecked(&carsLoaded);
        	printf("%-20sCaptain knows car is loaded\n", captainLabel);
    	    }
	}
	printf("\n%-20sFerry is full, starting to sail\n\n", captainLabel);

	
	usleep(2000000); 
	printf( "%-20sFerry has reached destination port\n\n", captainLabel);
 
        /* signal all vehicles they have arrived at the destination dock */
    	pthread_mutex_lockChecked(&protectTrucksSailing);
        for(counter = 0; counter < trucksSailingCounter; counter++) {
	    sem_postChecked(&trucksSailing);
        }
    	pthread_mutex_unlockChecked(&protectTrucksSailing);
    	pthread_mutex_lockChecked(&protectCarsSailing);
        for(counter = 0; counter < carsSailingCounter; counter++) {
	    sem_postChecked(&carsSailing);
        }
    	pthread_mutex_unlockChecked(&protectCarsSailing);


      	/* the captain signals the vehicles to unload */
      	/* then waits for vehicles to unload */
	numberOfSpacesEmpty = 0;
	while(numberOfSpacesEmpty < TOTAL_SPOTS_ON_FERRY) {
    	    pthread_mutex_lockChecked(&protectCarsUnloaded);
	    if( carsUnloadedCounter > 0 ){
		carsUnloadedCounter--;
		numberOfSpacesEmpty++;
    	        pthread_mutex_unlockChecked(&protectCarsUnloaded);
                sem_waitChecked(&carsUnloaded);
	    	printf( "%-20sCaptain knows a car has unloaded from the ferry\n",
			captainLabel);
	        printf( "%-20sCaptain sees a car leaving ferry terminal\n", captainLabel);
    	        sem_post(&waitToExit);
    	    	pthread_mutex_lockChecked(&protectCarsUnloaded);
	    }
    	    pthread_mutex_unlockChecked(&protectCarsUnloaded);
    	    pthread_mutex_lockChecked(&protectTrucksUnloaded);
	    if( trucksUnloadedCounter > 0 ){
		trucksUnloadedCounter--;
		numberOfSpacesEmpty+=2;
    	    	pthread_mutex_unlockChecked(&protectTrucksUnloaded);
		sem_waitChecked(&trucksUnloaded);
	    	printf( "%-20sCaptain knows a truck has unloaded from the ferry\n",
			captainLabel);
	        printf( "%-20sCaptain sees a truck leaving ferry terminal\n", captainLabel);
    	        sem_post(&waitToExit);
    	        pthread_mutex_lockChecked(&protectTrucksUnloaded);
	    }
    	    pthread_mutex_unlockChecked(&protectTrucksUnloaded);
	}
	printf( "%-20sUnloading complete\n\n", captainLabel);
	printf("\n\n\n\n");
	loads++;
    }
    pthread_mutex_lockChecked(&protectThreadCounter);
    threadFlag = 1;
    pthread_mutex_unlockChecked(&protectThreadCounter);
    pthread_exit(NULL);
}


int timeChange( const struct timeval startTime )
{
    struct timeval nowTime;
    long int elapsed;
    int elapsedTime;

    gettimeofday(&nowTime, NULL);
    elapsed = (nowTime.tv_sec - startTime.tv_sec) * 1000000
          + (nowTime.tv_usec - startTime.tv_usec);
    elapsedTime = elapsed / 1000;
    return elapsedTime;
}


int sem_waitChecked(sem_t *semaphoreID)
{
        int returnValue;
	returnValue = sem_wait(semaphoreID);
	if (returnValue == -1 ) {
	    printf("semaphore wait failed: simulation terminating\n");
	    exit(10);
	}
	return returnValue;
}

int sem_postChecked(sem_t *semaphoreID) 
{
        int returnValue;
	returnValue = sem_post(semaphoreID);
	if (returnValue < 0 ) {
	    printf("semaphore post operation failed: simulation terminating\n");
	    exit(20);
	}
	return returnValue;
}

int sem_initChecked(sem_t *semaphoreID, int pshared, unsigned int value) 
{
        int returnValue;
	returnValue = sem_init(semaphoreID, pshared, value);
	if (returnValue < 0 ) {
	    printf("semaphore init operation failed: simulation terminating\n");
	    exit(30);
	}
	return returnValue;
}

int sem_destroyChecked(sem_t *semaphoreID) 
{
        int returnValue;
	returnValue = sem_destroy(semaphoreID);
	if (returnValue < 0 ) {
	    printf("semaphore destroy operation failed: terminating\n");
	    exit(40);
	}
	return returnValue;
}

int pthread_mutex_lockChecked(pthread_mutex_t *mutexID) 
{
        int returnValue;
	returnValue = pthread_mutex_lock(mutexID);
	if (returnValue < 0 ) {
	    printf("pthread mutex lock operation failed: terminating\n");
	    exit(50);
	}
	return returnValue;
}

int pthread_mutex_unlockChecked(pthread_mutex_t *mutexID) 
{
        int returnValue;
	returnValue = pthread_mutex_unlock(mutexID);
	if (returnValue < 0 ) {
	    printf("pthread mutex unlock operation failed: terminating\n");
	    exit(60);
	}
	return returnValue;
}

int pthread_mutex_initChecked(pthread_mutex_t *mutexID, 
                                       const pthread_mutexattr_t *attrib) 
{
        int returnValue;
	returnValue = pthread_mutex_init(mutexID, attrib);
	if (returnValue < 0 ) {
	    printf("pthread init operation failed: simulation terminating\n");
	    exit(70);
	}
	return returnValue;
}

int pthread_mutex_destroyChecked(pthread_mutex_t *mutexID)
{
        int returnValue;
	returnValue = pthread_mutex_destroy(mutexID);
	if (returnValue < 0 ) {
	    printf("pthread destroy failed: simulation terminating\n");
	    exit(80);
	}
	return returnValue;
}